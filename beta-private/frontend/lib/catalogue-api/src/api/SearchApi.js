/**
 * catalogue-api
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PaginatedListSolutionEx'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PaginatedListSolutionEx'));
  } else {
    // Browser globals (root is window)
    if (!root.CatalogueApi) {
      root.CatalogueApi = {};
    }
    root.CatalogueApi.SearchApi = factory(root.CatalogueApi.ApiClient, root.CatalogueApi.PaginatedListSolutionEx);
  }
}(this, function(ApiClient, PaginatedListSolutionEx) {
  'use strict';

  /**
   * Search service.
   * @module api/SearchApi
   * @version 1.0.0-private-beta
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get existing solution/s which are related to the given keyword  Keyword is not case sensitive
     * @param {String} keyword keyword describing a solution or capability
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListSolutionEx} and HTTP response
     */
    this.apiPorcelainSearchSolutionExByKeywordByKeywordGetWithHttpInfo = function(keyword, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling apiPorcelainSearchSolutionExByKeywordByKeywordGet");
      }


      var pathParams = {
        'keyword': keyword
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListSolutionEx;

      return this.apiClient.callApi(
        '/api/porcelain/Search/SolutionExByKeyword/{keyword}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get existing solution/s which are related to the given keyword  Keyword is not case sensitive
     * @param {String} keyword keyword describing a solution or capability
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListSolutionEx}
     */
    this.apiPorcelainSearchSolutionExByKeywordByKeywordGet = function(keyword, opts) {
      return this.apiPorcelainSearchSolutionExByKeywordByKeywordGetWithHttpInfo(keyword, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
