#capability-summary {
  background-color: $color-nhs-light-grey;
  padding: 1em;

  [data-id] {
    line-height: 150%;
  }

  .standard-count,
  .capability-count {
    &.singular {
      .singular { display: inherit; }
      .plural { display: none; }
    }

    &.plural {
      .singular { display: none; }
      .plural { display: inherit; }
    }
  }

  .capabilities,
  .standards {
    [data-id],
    .associated {
      display: none;

      &.selected {
        display: inherit;
      }
    }

  }
}

#capability-selector {
  background-color: $color-capability-selector-bg;
  left: -1.5rem;
  position: relative;
  width: calc(100% + 2.5rem);

  .capability-group {
    border: 0;
    border-top: solid 3px $color-capability-selector-group-fg;
    margin: 1em 0 2em;
    padding: 0 1.5rem;
    width: 100%;

    legend {
      color: $color-capability-selector-group-fg;
      font-size: 1.2em;
      font-weight: bold;

      &::before {
        content: 'â–¼';
        display: inline-block;
        font-size: larger;
        padding-right: .25em;
      }
    }

    .capabilities {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
      margin: 0 auto;
      max-width: 70rem;

      .capability {
        background-color: $color-capability-selector-capability-bg;
        background-repeat: no-repeat;
        background-size: 20% 20%;
        background-position: center;
        box-shadow: 0 2px 2px 2px rgba(0, 0, 0, .25);
        cursor: pointer;
        display: block;
        height: 15rem;
        max-height: 14rem;
        margin: 1.5em .5em 1.5em .5em;
        overflow: hidden;
        padding: 1rem 1.5rem;
        position: relative;
        width: 18rem;
        max-width: 17rem;
        top: 0;
        transition-property: max-height, max-width, top;
        transition-duration: .1s;
        transition-timing-function: linear;

        &:not(.revealed):hover {
          background-image: none;
          box-shadow: none;
          max-height: 15rem;
          outline: 3px solid $color-capability-selector-capability-outline;
          max-width: 18rem;
          top: -.5rem;
          transition-property: max-height, max-width, top;
          transition-duration: .1s;
          transition-timing-function: linear;
        }

        .description {
          opacity: 0;

          .full-description-link {
            display: none;
          }
        }

        &:hover .description {
          opacity: 1;
          transition: opacity .2s ease-in;
        }

        .name {
          color: $color-capability-selector-capability-name-fg;
          font-weight: bold;
          margin-top: 1rem;
          text-align: center;
        }

        .reveal {
          font-size: smaller;
          font-weight: normal;

          & > *:not(.description) {
            display: none;
          }
        }

        &.selected {
          background-color: $color-capability-selector-capability-selected-bg;
          color: $color-capability-selector-capability-selected-fg;

          .name {
            color: $color-capability-selector-capability-selected-name-fg;
          }
        }

        &.revealed {
          height: 16rem;
          margin-bottom: 25rem;
          max-height: inherit;
          outline: none;
          overflow: visible;

          .reveal {
            background-color: $color-capability-selector-reveal-bg;
            box-shadow: 0 4px 2px 2px rgba(0, 0, 0, .25);
            color: $color-capability-selector-reveal-fg;
            max-height: 50rem;
            padding: 2rem;
            position: absolute;
            top: 16rem;
            z-index: 1;

            .description {
              margin-bottom: 2em;
              margin-top: 0;
              opacity: 1;
            }

            & > *:not(.description) {
              display: block;
            }

            .standards ul {
              color: var(--color-nhs-blue);
              list-style-type: disc;
              padding-left: 1.25em;
            }

            .description .full-description-link {
              display: inline-block;
            }

            .selection {
              align-items: center;
              display: flex;
              flex-direction: row;

              .controls {
                width: 40%;
              }
            }

            // styling the reveal's checkbox like a button when unchecked, and as a
            // combination of a tick and unselect link when checked
            [name^='capabilities'] {
              left: -10em;
              opacity: 0; // make it invisible but still accessible
              position: absolute; // take it out of flow so the labels align correctly

              // show the appropriate label only
              &:not(:checked) ~ label.checked,
              &:checked ~ label.unchecked {
                display: none;
              }

              // give the label the appearance of focus
              &:focus ~ label.unchecked,
              &:focus ~ label.checked .remove {
                outline: 2px solid Highlight;
                outline: 5px auto -webkit-focus-ring-color;
              }

              ~ label.checked {
                .selected {
                  color: $color-nhs-green;
                  padding-right: 3em;
                }

                .remove {
                  color: $color-nhs-blue;
                  text-decoration: underline;
                }
              }
            }
          }
        }

        // reveal width and position responds to viewport width
        @media screen and (max-width: 46rem) {
          &.revealed .reveal {
            left: 0;
            width: 16rem;
          }
        }

        @media screen and (min-width: 46rem) and (max-width: 58rem) {
          &.revealed .reveal {
            width: 35rem;
          }

          &:nth-child(2n+1).revealed .reveal {
            left: 0;
          }

          &:nth-child(2n+2).revealed .reveal {
            left: -18rem;
          }
        }

        @media screen and (min-width: 58rem) {
          &.revealed .reveal {
            width: 53rem;
          }

          &:nth-child(3n+1).revealed .reveal {
            left: 0;
          }

          &:nth-child(3n+2).revealed .reveal {
            left: -18rem;
          }

          &:nth-child(3n+3).revealed .reveal {
            left: -36rem;
          }
        }
      }
    }
  }
}
